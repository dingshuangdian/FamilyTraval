package com.kingtangdata.inventoryassis.act;

import java.io.IOException;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.URL;

import android.app.AlertDialog;
import android.app.Dialog;
import android.app.AlertDialog.Builder;
import android.content.DialogInterface;
import android.content.Intent;
import android.content.SharedPreferences;
import android.os.AsyncTask;
import android.os.Bundle;
import android.view.View;
import android.widget.EditText;

import com.kingtangdata.inventoryassis.R;
import com.kingtangdata.inventoryassis.activity.BaseActivity;
import com.kingtangdata.inventoryassis.http.HttpConstants;
import com.kingtangdata.inventoryassis.util.LogUtils;
import com.kingtangdata.inventoryassis.util.MessageUtil;
import com.kingtangdata.inventoryassis.util.StorageUtils;


/**
 * 基础设置类
 * @author Administrator
 *
 */
public class ActivitySysPreference extends BaseActivity{
	
	private EditText mDefaultUser;//取设置默认用户
	private EditText mServerAddr; //取设置服务地址
	private EditText mPassword; //取设置密码
	
	/*
	 * 关于广州正泰商业数据有限公司
	 */
	public void doAbout(View view) {

	}		

	public void doTest(View view) {
		TestNetworkTask task = new TestNetworkTask() ;
		task.execute();
	}

	public void doSave(View view) {
		String username = mDefaultUser.getText().toString().trim();
		String ipaddress = mServerAddr.getText().toString().trim();
		String password = mPassword.getText().toString().trim();

		StorageUtils.setProperty(StorageUtils.USER_ACCOUNT, username,this);
		StorageUtils.setProperty(StorageUtils.IP_ADDRESS, ipaddress, this);
		StorageUtils.setProperty(StorageUtils.USER_PASSWORD, password, this);
		
		//提示保存成功
		MessageUtil.setMessage("保存成功", ActivitySysPreference.this);
	}

	@Override
	public void onCreate(Bundle paramBundle) {
		super.onCreate(paramBundle);
		super.setContentView(R.layout.activity_preference);
		super.setTopLabel("基础设置");
		
		mDefaultUser = ((EditText)findViewById(R.id.input_default_user));
		mPassword = ((EditText)findViewById(R.id.input_default_password));
		mServerAddr = ((EditText)findViewById(R.id.input_server_addr));
		
		//显示默认的值
		String username = StorageUtils.getString(StorageUtils.USER_ACCOUNT, this, "");
		String ipaddress = StorageUtils.getString(StorageUtils.IP_ADDRESS, this, "160.0.0.85:8888");
		String password = StorageUtils.getString(StorageUtils.USER_PASSWORD, this, "dba");
	
		mDefaultUser.setText(username);
		mServerAddr.setText(ipaddress);
		mPassword.setText(password);
	}
	
	@Override
	public void onBackPressed() {
		// TODO Auto-generated method stub
		Builder builder = new AlertDialog.Builder(this);
		builder.setTitle("温馨提示");
		builder.setMessage("确认要退出应用？");
		builder.setNegativeButton("取消", null);
		builder.setNeutralButton("确定", new DialogInterface.OnClickListener() {
			@Override
			public void onClick(DialogInterface dialog, int which) {
				// TODO Auto-generated method stub
				finish();
			}
		});
		builder.create().show();
	}
	
	/**
	 * 测试服务器是否连通
	 * @author Administrator
	 *
	 */
	class TestNetworkTask extends AsyncTask<String, Integer, Boolean>{
		
		@Override
		protected Boolean doInBackground(String... params) {
			
			try {
				String ip_address = mServerAddr.getText().toString();
				String httpAddress = "http://" + ip_address + HttpConstants.TEST_ACTION ;
				
				LogUtils.logd(getClass(), "httpAddress = " + httpAddress);
				URL url = new URL(httpAddress);
				HttpURLConnection connection = (HttpURLConnection)url.openConnection();
				connection.setReadTimeout(HttpConstants.CONNECT_TIME_OUT);
				connection.setConnectTimeout(HttpConstants.READ_TIME_OUT);
				LogUtils.logd(getClass(), "code = " + connection.getResponseCode());
				
				return connection.getResponseCode() == 200 ;
			}  catch (MalformedURLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
				return false;
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
				return false;
			}
		}
	
		@Override
		protected void onPostExecute(Boolean result) {
			// TODO Auto-generated method stub
			if(result){
				//目前判断服务器是否能连接成功就根据是否能调获取任务列表接口
				MessageUtil.setMessage("连接成功", ActivitySysPreference.this);
			}else{
				MessageUtil.setMessage("连接失败", ActivitySysPreference.this);
			}
		}
	}
}