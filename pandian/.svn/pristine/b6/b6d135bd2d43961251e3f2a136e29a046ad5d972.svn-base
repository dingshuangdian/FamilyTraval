package com.kingtangdata.inventoryassis.act;

import java.net.HttpURLConnection;
import java.net.URL;
import java.util.List;

import android.app.AlertDialog;
import android.app.Dialog;
import android.content.Context;
import android.content.DialogInterface;
import android.os.AsyncTask;
import android.os.Bundle;
import android.os.Handler;
import android.os.Message;
import android.view.View;
import android.widget.CheckBox;
import android.widget.ProgressBar;
import android.widget.TextView;

import com.kingtangdata.inventoryassis.R;
import com.kingtangdata.inventoryassis.activity.BaseActivity;
import com.kingtangdata.inventoryassis.adapter.PopForTaskAdapter;
import com.kingtangdata.inventoryassis.common.AsyncReqTask;
import com.kingtangdata.inventoryassis.data.Dept;
import com.kingtangdata.inventoryassis.data.Plan;
import com.kingtangdata.inventoryassis.data.Task;
import com.kingtangdata.inventoryassis.data.User;
import com.kingtangdata.inventoryassis.db.DeptManager;
import com.kingtangdata.inventoryassis.db.PlanManager;
import com.kingtangdata.inventoryassis.db.UserManager;
import com.kingtangdata.inventoryassis.http.HttpConstants;
import com.kingtangdata.inventoryassis.http.HttpResponseCode;
import com.kingtangdata.inventoryassis.http.business.SystemProvider;
import com.kingtangdata.inventoryassis.http.domain.BaseReq;
import com.kingtangdata.inventoryassis.http.domain.BaseRes;
import com.kingtangdata.inventoryassis.http.domain.DeptRes;
import com.kingtangdata.inventoryassis.http.domain.PlanReq;
import com.kingtangdata.inventoryassis.http.domain.PlanRes;
import com.kingtangdata.inventoryassis.http.domain.TaskReq;
import com.kingtangdata.inventoryassis.http.domain.TaskRes;
import com.kingtangdata.inventoryassis.http.domain.UserRes;
import com.kingtangdata.inventoryassis.util.LogUtils;
import com.kingtangdata.inventoryassis.util.MessageUtil;
import com.kingtangdata.inventoryassis.util.StorageUtils;
import com.kingtangdata.inventoryassis.view.SliderPopupChoicer;

/**
 * 任务下载界面
 * @author leo
 */
public class ActivityDownloadTask extends BaseActivity{
	
	private static final int PAGE_SIZE = 10;  
	
	//进度条
	ProgressBar progressBarUser;
	ProgressBar progressBarPlan;
	ProgressBar progressBarBind;
	
	//文本框
	TextView   progressTextUser;
	TextView   progressTextPlan;
	TextView   progressTextBind;
	
	//复选框
	CheckBox downloadPlanCheckBox;
	CheckBox downloadUserCheckBox;
	CheckBox downloadBindCheckBox;
	
	//下拉选项框控件
	SliderPopupChoicer choicerPlan;
	SliderPopupChoicer choicerBind;
	
	//异步任务
	TestNetworkTask tnTask = null;
	DownloadUserTask duTask = null;
	GetPlanListTask glTask = null;
	GetBindListTask gbTask = null;
	DownloadPlanTask dpTask = null;
	DownloadBindTask dbTask = null;
	
	//正在下载中的标志
	boolean isDownloadingUser = false;
	boolean isDownloadingPlan = false;
	boolean isDownloadingBind = false;
	
	boolean isDownloadUserSuccess = false;
	boolean isDownloadPlanSuccess = false;
	boolean isDownloadBindSuccess = false;
	@Override
	protected void onCreate(Bundle savedInstanceState) {
		// TODO Auto-generated method stub
		super.onCreate(savedInstanceState);
		super.setContentView(R.layout.activity_download_task);
		super.setTopLabel("下载任务");
		super.setLeftButtonText("返回");
		
		downloadUserCheckBox = (CheckBox)findViewById(R.id.check_person);
		downloadPlanCheckBox = (CheckBox)findViewById(R.id.check_plan);
		downloadBindCheckBox = (CheckBox)findViewById(R.id.check_bind);
		
		progressBarUser = (ProgressBar)findViewById(R.id.progress_download1);
		progressBarPlan = (ProgressBar)findViewById(R.id.progress_download2);
		progressBarBind = (ProgressBar)findViewById(R.id.progress_download3);
		
		progressTextUser =  (TextView)findViewById(R.id.progress_text1);
		progressTextPlan =  (TextView)findViewById(R.id.progress_text2);
		progressTextBind =  (TextView)findViewById(R.id.progress_text3);
		
		choicerPlan = (SliderPopupChoicer)findViewById(R.id.checker_choice_plan);
		choicerBind = (SliderPopupChoicer)findViewById(R.id.checker_choice_bind);
		
		//如果是第一次初始化的时候隐藏下载任务和下载标签
		if(!StorageUtils.getBoolean(StorageUtils.ISINIT, this)){
			findViewById(R.id.plan_view).setVisibility(View.GONE);
			findViewById(R.id.bind_view).setVisibility(View.GONE);
		}
		
		//获取任务列表   dept_id为当前登录用户的部门id
		String user_id = StorageUtils.getString(StorageUtils.USER_ID, this, "");
		TaskReq req1 = new TaskReq();
		req1.setUser_id(user_id);
		req1.setRunning("c");
		glTask = new GetPlanListTask(this);
		glTask.execute(req1);
		
		TaskReq req2 = new TaskReq();
		req2.setUser_id(user_id);
		req2.setRunning("b");
		gbTask = new GetBindListTask(this);
		gbTask.execute(req2);
	}
	
	@Override
	protected void onResume() {
		// TODO Auto-generated method stub
		super.onResume();
		
		if(!isNetworkAvalible()){
			setRightButtonImage(R.drawable.icon_network_no);
		}else{
			tnTask = new TestNetworkTask();
			tnTask.execute();
		}
	}
	
	
	@Override
	public void onBackPressed() {
		// TODO Auto-generated method stub
		if(isDownloadingPlan || isDownloadingUser){
			showDialog(0);
		}else{
			finish();
		}
	}
	
	@Override
	protected Dialog onCreateDialog(int id) {
		if(id == 0){
			AlertDialog.Builder builder= new AlertDialog.Builder(this);
			builder.setTitle("温馨提示");
			builder.setMessage("正在从服务器下载数据，是否确认要退出？");
			builder.setNeutralButton("确定", new LeftListener());
			builder.setNegativeButton("取消", null);
			return builder.create();
		}
		else if(id == 1){
			AlertDialog.Builder builder= new AlertDialog.Builder(this);
			builder.setTitle("提示");
			builder.setMessage("下载成功！");
			builder.setNegativeButton("确定", new SureListener());
			return builder.create();
		}
		else {
			return super.onCreateDialog(id);
		}
	}
	
	class LeftListener implements DialogInterface.OnClickListener {
		@Override
		public void onClick(DialogInterface dialog, int which) {
			// TODO Auto-generated method stub
			finish();
		}
	}
	
	class SureListener implements DialogInterface.OnClickListener {
		@Override
		public void onClick(DialogInterface dialog, int which) {
			// TODO Auto-generated method stub
			setResult(RESULT_OK);
			finish();
		}
	}
	
	@Override
	public void doClickLeftBtn() {
		// TODO Auto-generated method stub
		onBackPressed();
	}
	
	
	@Override
	protected void onDestroy() {
		// TODO Auto-generated method stub
		super.onDestroy();
		
		//在界面销毁的时候销毁所有的进程
		if(tnTask != null && !tnTask.isCancelled()){
			tnTask.cancel(true);
		}
		
		if(duTask != null && !duTask.isCancelled()){
			duTask.cancel(true);
		}
		
		if(glTask != null && !glTask.isCancelled()){
			glTask.cancel(true);
		}
		
		if(gbTask != null && !gbTask.isCancelled()){
			gbTask.cancel(true);
		}
		
		if(dpTask != null && !dpTask.isCancelled()){
			dpTask.cancel(true);
		}
		
		if(dbTask != null && !dbTask.isCancelled()){
			dbTask.cancel(true);
		}
	}
	
	/**
	 * 点击开始下载的方法
	 * @param view
	 */
	public void doStart(View view){
		
		//至少有一个选中才开始下载
		if(downloadUserCheckBox.isChecked() && !isDownloadingUser && !isDownloadUserSuccess){
			//先判断一下网络是否可用  不可用会给出提示
			if(isNetworkAvalible()){
				duTask = new DownloadUserTask(this);
				duTask.execute(new BaseReq());
				
				progressTextUser.setText("已下载0%");
			}else{
				return;
			}
		}
		
		if(downloadBindCheckBox.isChecked() && !isDownloadingBind && !isDownloadBindSuccess){
			if(choicerBind.getSelectItem() == null){
				//没选列表的时候  可以在此处给出相应有好提示
			}
			else if(isNetworkAvalible()){
				Object o = choicerBind.getSelectItem();
				//加这样一个控制主要是进一步保证类型转换不会出错
				if(o instanceof Task){
					Task t = (Task)o;
					
					//第一次请求数据
					PlanReq req = new PlanReq();
					req.setCheckId(t.getCheck_id());
					req.setRunning("b");
					req.setEachnum(PAGE_SIZE);
					
					dbTask = new DownloadBindTask(this);
					dbTask.execute(req);
					
					progressTextBind.setText("已下载0%");
				}
			}
		}
		
		if(downloadPlanCheckBox.isChecked() && !isDownloadingPlan  && !isDownloadPlanSuccess){
			
			if(choicerPlan.getSelectItem() == null){
				//没选列表的时候  可以在此处给出相应有好提示
			}
			
			else if(isNetworkAvalible()){
				Object o = choicerPlan.getSelectItem();
				//加这样一个控制主要是进一步保证类型转换不会出错
				if(o instanceof Task){
					Task t = (Task)o;
					
					//第一次请求数据
					PlanReq req = new PlanReq();
					req.setCheckId(t.getCheck_id());
					req.setRunning("c");
					req.setEachnum(PAGE_SIZE);
					
					dpTask = new DownloadPlanTask(this);
					dpTask.execute(req);
					
					progressTextPlan.setText("已下载0%");
				}
			}else{
				return;
			}
		}
	} 
	
	
	/**
	 * 获取百分比
	 * @param x
	 * @param total
	 * @return
	 */
	public int getPercent(int x,int total){  
		
		if(x == 0 || total == 0 ){
			return 0;
		}
		
		int tempresult=x*100/total;  
		return tempresult;  
	}  
	
	/**
	 * 测试服务器是否连通
	 * @author Administrator
	 *
	 */
	class TestNetworkTask extends AsyncTask<String, Integer, Boolean>{
		
		@Override
		protected Boolean doInBackground(String... params) {
			
			try {
				String ip_address = StorageUtils.getString(StorageUtils.IP_ADDRESS, ActivityDownloadTask.this, HttpConstants.DEFAULT_IP);
				String httpAddress = "http://" + ip_address + HttpConstants.TEST_ACTION ;
				
				URL url = new URL(httpAddress);
				HttpURLConnection connection = (HttpURLConnection)url.openConnection();
				connection.setReadTimeout(HttpConstants.CONNECT_TIME_OUT);
				connection.setConnectTimeout(HttpConstants.READ_TIME_OUT);
				LogUtils.logd(getClass(), "code = " + connection.getResponseCode());
				
				return connection.getResponseCode() == 200 ;
			} catch (Exception e) {
				// TODO Auto-generated catch block
				return false;
			}
		}
	
		@Override
		protected void onPostExecute(Boolean result) {
			// TODO Auto-generated method stub
			if(result){
				//目前判断服务器是否能连接成功就根据是否能调获取任务列表接口
				setRightButtonImage(R.drawable.icon_network_ok);
			}else{
				setRightButtonImage(R.drawable.icon_network_no);
			}
		}
	}
	
	/**
	 * 获取任务
	 * @author Administrator
	 *
	 */
	class GetPlanListTask extends AsyncReqTask{

		public GetPlanListTask(Context context) {
			super(context);
			// TODO Auto-generated constructor stub
		}

		@Override
		protected BaseRes doRequest(BaseReq request) {
			// TODO Auto-generated method stub
			return SystemProvider.getInstance(getApplicationContext()).getTask(request);
		}

		@Override
		protected void handleResponse(BaseRes response) {
			// TODO Auto-generated method stub
			if(response == null){
				return ;
			}
			
			if(HttpResponseCode.SUCCESS.equals(response.getCode())){
				TaskRes res = (TaskRes)response;
				List<Task> tasks = res.getDatas();
				
				PopForTaskAdapter adapter = new PopForTaskAdapter(ActivityDownloadTask.this, tasks);
				choicerPlan.setAdapter(adapter);
				
				//目前判断服务器是否能连接成功就根据是否能调获取任务列表接口
				setRightButtonImage(R.drawable.icon_network_ok);
			}else{
				setRightButtonImage(R.drawable.icon_network_no);
			}
		}
	}
	
	/**
	 * 获取任务
	 * @author Administrator
	 *
	 */
	class GetBindListTask extends AsyncReqTask{

		public GetBindListTask(Context context) {
			super(context);
			// TODO Auto-generated constructor stub
		}

		@Override
		protected BaseRes doRequest(BaseReq request) {
			// TODO Auto-generated method stub
			return SystemProvider.getInstance(getApplicationContext()).getTask(request);
		}

		@Override
		protected void handleResponse(BaseRes response) {
			// TODO Auto-generated method stub
			if(response == null){
				return ;
			}
			
			if(HttpResponseCode.SUCCESS.equals(response.getCode())){
				TaskRes res = (TaskRes)response;
				List<Task> tasks = res.getDatas();
				
				PopForTaskAdapter adapter = new PopForTaskAdapter(ActivityDownloadTask.this, tasks);
				choicerBind.setAdapter(adapter);
				
				//目前判断服务器是否能连接成功就根据是否能调获取任务列表接口
				setRightButtonImage(R.drawable.icon_network_ok);
			}else{
				setRightButtonImage(R.drawable.icon_network_no);
			}
		}
	}
	
	class DownloadPlanTask extends AsyncReqTask{
		//总记录数
		int totalNum = 0;
		//总页数
		int totalPage = 0;
		//页码
		int pageNum = 0;
		
		public DownloadPlanTask(Context context) {
			super(context);
			// TODO Auto-generated constructor stub
		}

		
		@Override
		protected void onPreExecute() {
			// TODO Auto-generated method stub
			isDownloadingPlan = true;
		}
		
		@Override
		protected BaseRes doRequest(BaseReq request) {
			// TODO Auto-generated method stub
			PlanReq req = (PlanReq)request;
			PlanRes pres = SystemProvider.getInstance(getApplicationContext()).getPlan(req);
			
			//保存checkid
			StorageUtils.setProperty(StorageUtils.CHECK_ID, req.getCheckId(),ActivityDownloadTask.this);
			//总记录数
			totalNum = Integer.valueOf(pres.getTotalnum());
			
			//计算总页数
			if(totalNum % PAGE_SIZE == 0){
				totalPage = totalNum/PAGE_SIZE;
			}else{
				totalPage = totalNum/PAGE_SIZE + 1;
			}
			
			//如果总页数小于等于0直接返回
			if(totalPage <= 0){
				return new BaseRes();
			}
			
			PlanManager.getInstance(getApplicationContext()).deletePlans(" running = ?",new String[]{"c"});
			//根据总页数循环去服务器获取数据插入本地数据库
			for (int i = 0; i < totalPage; i++) {
				req.setPagenum(i+1);
				pres =  SystemProvider.getInstance(getApplicationContext()).getPlan(req);
				List<Plan> plans = pres.getDatas();
				PlanManager.getInstance(getApplicationContext()).addPlans(plans);
				
				//清除缓存，更好的利用缓存加快下载速度
				if(plans != null){
					plans.clear();
					plans = null;
				}
				
				if(pres != null){
					if(HttpResponseCode.SUCCESS.equals(pres.getCode())){
						//最后完成显示100%
						if(i == totalPage - 1){
							publishProgress(100);
							
							//下载任务成功的标志
							isDownloadPlanSuccess = true;
						}else{
							publishProgress(getPercent(i, totalPage));
						}
						pres = null;
					}else{
						Message msg = new Message();
						msg.obj = pres.getDesc();
						handler.sendMessage(msg);
						pres = null;
						//下载结束
						isDownloadingPlan = false;
						return new BaseRes();
					}
				}
			}
			//下载结束
			isDownloadingPlan = false;
			return  new BaseRes();
		}

		@Override
		protected void handleResponse(BaseRes response) {
			// TODO Auto-generated method stub
			resultHandler.obtainMessage().sendToTarget();
		}
		
		@Override
		protected void onProgressUpdate(Integer... values) {
			// TODO Auto-generated method stub
			progressBarPlan.setProgress(values[0]);
			if(values[0] == 100){
				progressTextPlan.setText("已完成");
			}else{
				progressTextPlan.setText("已下载"+values[0] + "%");
			}
		}
	}
	
	
	class DownloadBindTask extends AsyncReqTask{
		//总记录数
		int totalNum = 0;
		//总页数
		int totalPage = 0;
		//页码
		int pageNum = 0;
		
		public DownloadBindTask(Context context) {
			super(context);
			// TODO Auto-generated constructor stub
		}

		
		@Override
		protected void onPreExecute() {
			// TODO Auto-generated method stub
			isDownloadingBind = true;
		}
		
		@Override
		protected BaseRes doRequest(BaseReq request) {
			// TODO Auto-generated method stub
			PlanReq req = (PlanReq)request;
			PlanRes pres = SystemProvider.getInstance(getApplicationContext()).getPlan(req);
			
			//保存checkid
			//StorageUtils.setProperty(StorageUtils.CHECK_ID, req.getCheckId(),ActivityDownloadTask.this);
			//总记录数
			totalNum = Integer.valueOf(pres.getTotalnum());
			
			//计算总页数
			if(totalNum % PAGE_SIZE == 0){
				totalPage = totalNum/PAGE_SIZE;
			}else{
				totalPage = totalNum/PAGE_SIZE + 1;
			}
			
			//如果总页数小于等于0直接返回
			if(totalPage <= 0){
				return new BaseRes();
			}
			
			StringBuffer querySQL = new StringBuffer();
			querySQL.append("delete from  plans where running = ? ");
			PlanManager.getInstance(getApplicationContext()).deletePlans(" running = ?",new String[]{"b"});
			//根据总页数循环去服务器获取数据插入本地数据库
			for (int i = 0; i < totalPage; i++) {
				req.setPagenum(i+1);
				pres =  SystemProvider.getInstance(getApplicationContext()).getPlan(req);
				List<Plan> plans = pres.getDatas();
				PlanManager.getInstance(getApplicationContext()).addPlans(plans);
				
				//清除缓存，更好的利用缓存加快下载速度
				if(plans != null){
					plans.clear();
					plans = null;
				}
				
				if(pres != null){
					if(HttpResponseCode.SUCCESS.equals(pres.getCode())){
						//最后完成显示100%
						if(i == totalPage - 1){
							publishProgress(100);
							
							//下载任务成功的标志
							isDownloadBindSuccess = true;
						}else{
							publishProgress(getPercent(i, totalPage));
						}
						pres = null;
					}else{
						Message msg = new Message();
						msg.obj = pres.getDesc();
						handler.sendMessage(msg);
						pres = null;
						//下载结束
						isDownloadingBind = false;
						return new BaseRes();
					}
				}
			}
			//下载结束
			isDownloadingBind = false;
			return  new BaseRes();
		}

		@Override
		protected void handleResponse(BaseRes response) {
			// TODO Auto-generated method stub
			resultHandler.obtainMessage().sendToTarget();
		}
		
		@Override
		protected void onProgressUpdate(Integer... values) {
			// TODO Auto-generated method stub
			progressBarBind.setProgress(values[0]);
			if(values[0] == 100){
				progressTextBind.setText("已完成");
			}else{
				progressTextBind.setText("已下载"+values[0] + "%");
			}
		}
	}
	
	
	private Handler handler = new Handler(){
		@Override
		public void handleMessage(Message msg) {
			// TODO Auto-generated method stub
			makeText((String)msg.obj);
		}
	};
	
	/**
	 * 下载完成后显示提示
	 */
	private Handler resultHandler = new Handler(){
		public void handleMessage(Message msg) {
			StringBuffer buffer =  new StringBuffer();
			if(isDownloadUserSuccess){
				buffer.append("同步用户数据成功");
			}
			
			if(isDownloadBindSuccess){
				buffer.append("\n");
				buffer.append("同步绑定标签成功");
			}
			
			if(isDownloadPlanSuccess){
				buffer.append("\n");
				buffer.append("同步盘点任务成功");
			}
			
			if((!isDownloadingUser && !isDownloadingBind && !isDownloadingPlan)&&(isDownloadUserSuccess || isDownloadBindSuccess || isDownloadPlanSuccess)){
				if(StorageUtils.getBoolean(StorageUtils.ISINIT, ActivityDownloadTask.this)){
					MessageUtil.setMessage(buffer.toString(),ActivityDownloadTask.this);
				}else{
					//设置已经初始化的标志位true
					StorageUtils.setProperty(StorageUtils.ISINIT, true, ActivityDownloadTask.this);
					showDialog(1);
				}
			}
		}
	};
	
	/**
	 * 异步任务  
	 * @author Administrator
	 *
	 */
	class DownloadUserTask extends AsyncReqTask{

		public DownloadUserTask(Context context) {
			super(context);
		}
		
		
		@Override
		protected void onPreExecute() {
			// TODO Auto-generated method stub
			isDownloadingUser = true;
		}

		@Override
		protected BaseRes doRequest(BaseReq request) {
			// TODO Auto-generated method stub
			UserRes ures = null;
			DeptRes dres = null;
			
			List<User> users= null;
			List<Dept> depts = null;
			
			//计算总个数  用来判断百分比
			int totalcount = 0;
			int current = 0;
			
			//如果选中了同步用户选项框
			if(downloadUserCheckBox.isChecked()){
				ures =  SystemProvider.getInstance(getApplicationContext()).getUser(request);
				dres =  SystemProvider.getInstance(getApplicationContext()).getDept(request);
			
				users = ures.getDatas();
				depts = dres.getDatas(); 
				
				if(users != null ){
					totalcount  += users.size();  
				}
				
				if(depts != null ){
					totalcount  += depts.size();  
				}
			}
			
			if(users!=null && !users.isEmpty()){
				UserManager.getInstance(getApplicationContext()).deleteUsers();
				for (int i = 0; i < users.size(); i++) {
					UserManager.getInstance(getApplicationContext()).addUser(users.get(i));
					publishProgress(getPercent(i, totalcount));
				}
			}
			
			if(depts!=null && !depts.isEmpty()){
				if(users!=null)current = users.size(); 
				DeptManager.getInstance(getApplicationContext()).deleteDepts(null);
				for (int i = 0; i < depts.size(); i++) {
					DeptManager.getInstance(getApplicationContext()).addDept(depts.get(i));
					
					//最后完成显示100%
					if(i == depts.size() - 1){
						publishProgress(100);
						
						//下载任务成功的标志
						isDownloadUserSuccess = true;
					}else{
						publishProgress(getPercent(current+i, totalcount));
					}
				}
			}
			
			isDownloadingUser = false;
			return new BaseRes();
		}

		@Override
		protected void handleResponse(BaseRes response) {
			// TODO Auto-generated method stub
			resultHandler.obtainMessage().sendToTarget();
		}

		@Override
		protected void onProgressUpdate(Integer... values) {
			// TODO Auto-generated method stub
			progressBarUser.setProgress(values[0]);
			if(values[0] == 100){
				progressTextUser.setText("已完成");
			}else{
				progressTextUser.setText("已下载"+values[0] + "%");
			}
		}
	}
}
