package com.kingtangdata.inventoryassis.activity.set;

import java.io.IOException;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.URL;

import android.content.Intent;
import android.os.AsyncTask;
import android.os.Bundle;
import android.view.View;
import android.widget.EditText;

import com.kingtangdata.inventoryassis.R;
import com.kingtangdata.inventoryassis.activity.ActivityDownloadTask;
import com.kingtangdata.inventoryassis.base.BaseActivity;
import com.kingtangdata.inventoryassis.http.HttpConstants;
import com.kingtangdata.inventoryassis.util.LogUtils;
import com.kingtangdata.inventoryassis.util.MessageUtil;
import com.kingtangdata.inventoryassis.util.StorageUtils;

/**
 * 基础设置类
 * 
 * @author Administrator
 * 
 */
public class ActivitySetIP extends BaseActivity {

	private EditText mServerAddr; // 服务地址

	public void doTest(View view) {
		TestNetworkTask task = new TestNetworkTask();
		task.execute();
	}

	public void doSave(View view) {
		String ipaddress = mServerAddr.getText().toString().trim();

		StorageUtils.setProperty(StorageUtils.IP_ADDRESS, ipaddress, this);
		
		if(StorageUtils.getBoolean(StorageUtils.ISINIT, this)){
			// 提示保存成功
			makeText("保存成功");
			finish();
		}else{
			makeText("保存成功");
			startActivityForResult(new Intent(this, ActivityDownloadTask.class),100);
		}
	}

	@Override
	public void onCreate(Bundle paramBundle) {
		super.onCreate(paramBundle);
		super.setContentView(R.layout.activity_setip);
		super.setLeftButtonText("返回");
		super.setTopLabel("服务器设置");

		mServerAddr = ((EditText) findViewById(R.id.input_server_addr));
		// 显示默认的值
		String ipaddress = StorageUtils.getString(StorageUtils.IP_ADDRESS,this, HttpConstants.DEFAULT_IP);

		mServerAddr.setText(ipaddress);
	}
	
	
	@Override
	protected void onActivityResult(int requestCode, int resultCode, Intent data) {
		
		super.onActivityResult(requestCode, resultCode, data);
		
		if(resultCode == RESULT_OK && requestCode == 100){
			setResult(RESULT_OK);
			finish();
		}
	}
	
	
	@Override
	public void onBackPressed() {
		
		setResult(RESULT_OK);
		finish();
	}
	

	/**
	 * 测试服务器是否连通
	 * 
	 * @author Administrator
	 * 
	 */
	class TestNetworkTask extends AsyncTask<String, Integer, Boolean> {

		@Override
		protected Boolean doInBackground(String... params) {

			try {
				String ip_address = mServerAddr.getText().toString();
				String httpAddress = "http://" + ip_address+ HttpConstants.TEST_ACTION;

				LogUtils.logd(getClass(), "httpAddress = " + httpAddress);
				URL url = new URL(httpAddress);
				HttpURLConnection connection = (HttpURLConnection) url.openConnection();
				connection.setReadTimeout(HttpConstants.CONNECT_TIME_OUT);
				connection.setConnectTimeout(HttpConstants.READ_TIME_OUT);
				LogUtils.logd(getClass(),"code = " + connection.getResponseCode());

				return connection.getResponseCode() == 200;
			} catch (MalformedURLException e) {
				e.printStackTrace();
				return false;
			} catch (IOException e) {
				e.printStackTrace();
				return false;
			}
		}

		@Override
		protected void onPostExecute(Boolean result) {
			
			if (result) {
				// 目前判断服务器是否能连接成功就根据是否能调获取任务列表接口
				MessageUtil.setMessage("连接成功", ActivitySetIP.this);
			} else {
				MessageUtil.setMessage("连接失败", ActivitySetIP.this);
			}
		}
	}
}