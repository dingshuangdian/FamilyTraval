/**
 * 
 */
package com.kingtangdata.inventoryassis.act;

import java.util.Properties;

import javax.mail.BodyPart;
import javax.mail.Message;
import javax.mail.Multipart;
import javax.mail.Session;
import javax.mail.Transport;
import javax.mail.internet.InternetAddress;
import javax.mail.internet.MimeBodyPart;
import javax.mail.internet.MimeMessage;
import javax.mail.internet.MimeMultipart;

import android.app.AlertDialog;
import android.app.Dialog;
import android.content.DialogInterface;
import android.content.Intent;
import android.net.Uri;
import android.os.Bundle;
import android.text.TextUtils;
import android.view.View;
import android.view.View.OnClickListener;
import android.widget.EditText;

import com.kingtangdata.inventoryassis.R;
import com.kingtangdata.inventoryassis.activity.BaseActivity;
import com.kingtangdata.inventoryassis.common.AsyncReqTask;
import com.kingtangdata.inventoryassis.util.MessageUtil;

/**
 * @author liyang 
 * 问题反馈界面
 */
public class ActivityFeedBack extends BaseActivity implements
		OnClickListener {
	public static final String LOG_TAG = ActivityFeedBack.class
			.getSimpleName();

	// 异步任务
	private AsyncReqTask task;
	private EditText etContent;

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		super.setContentView(R.layout.activity_feed_back);
		super.setTopLabel("问题反馈");
		super.setLeftButtonText("返回");
		// 反馈内容输入框
		etContent = (EditText) findViewById(R.id.et_content);
		// 提交事件
		findViewById(R.id.bt_confirm).setOnClickListener(this);
	}

	@Override
	protected Dialog onCreateDialog(int id) {
		AlertDialog.Builder builder = new AlertDialog.Builder(this);
		switch (id) {
		case 1:
			builder.setTitle("提示");
			builder.setMessage("提交成功，感谢您的支持！");
			builder.setNegativeButton("确认",new DialogInterface.OnClickListener() {
				@Override
				public void onClick(DialogInterface dialog, int which) {
					finish();//点击"好的"按钮后,直接OK跳本activity,返回TAB(更多)选项卡界面
				}
			});
			break;

		default:
			break;
		}
		return builder.create();
	}

	@Override
	public void onClick(View v) {
		// TODO Auto-generated method stub
		super.onClick(v);
		switch (v.getId()) {
		case R.id.bt_confirm:
			String content = etContent.getText().toString();
			if(TextUtils.isEmpty(content)){
				MessageUtil.setMessage("请填写您的意见", ActivityFeedBack.this);
			}else{
				Intent data=new Intent(Intent.ACTION_SENDTO);  
				data.setData(Uri.parse("mailto:leo.li@kingtangdata.com"));  
			    data.putExtra(Intent.EXTRA_SUBJECT, "盘点易问题反馈");  
			    data.putExtra(Intent.EXTRA_TEXT, content);  
			    startActivity(data);      
			}
			break;
		}
	}

	@Override
	protected void onDestroy() {
		// TODO Auto-generated method stub
		super.onDestroy();
		// 界面销毁的时候取消正在执行的异步任务
		if (task != null && !task.isCancelled()) {
			task.cancel(true);
		}
	}
	
	//以下是发送邮件代码
	private String host = "smtp.163.com";
	// smtp服务器
	private String user = "crazyly520@163.com";
	// 用户名
	private String pwd = "850510";
	
	public void send(String from, String to, String subject,String txt) {
		Properties props = new Properties();
		// 设置发送邮件的邮件服务器的属性（这里使用网易的smtp服务器）
		props.put("mail.smtp.host", host);
		// 需要经过授权，也就是有户名和密码的校验，这样才能通过验证（一定要有这一条）
		props.put("mail.smtp.auth", "true");
		// 用刚刚设置好的props对象构建一个session
		Session session = Session.getDefaultInstance(props);
		// 有了这句便可以在发送邮件的过程中在console处显示过程信息，供调试使 // 用（你可以在控制台（console)上看到发送邮件的过程）
		session.setDebug(true);
		// 用session为参数定义消息对象
		MimeMessage message = new MimeMessage(session);
		try {
			// 加载发件人地址
			message.setFrom(new InternetAddress(from));
			// 加载收件人地址
			message.addRecipient(Message.RecipientType.TO, new InternetAddress(
					to));
			// 加载标题
			message.setSubject(subject);
			// 向multipart对象中添加邮件的各个部分内容，包括文本内容和附件
			Multipart multipart = new MimeMultipart();
			// 设置邮件的文本内容
			BodyPart contentPart = new MimeBodyPart();
			contentPart.setText(txt);
			multipart.addBodyPart(contentPart);
			// 添加附件
			// BodyPart messageBodyPart = new MimeBodyPart();
			// DataSource source = new FileDataSource(affix);
			// 添加附件的内容
			// messageBodyPart.setDataHandler(new DataHandler(source));
			// 添加附件的标题
			// 这里很重要，通过下面的Base64编码的转换可以保证你的中文附件标题名在发送时不会变成乱码
			// sun.misc.BASE64Encoder enc = new sun.misc.BASE64Encoder();
			// messageBodyPart.setFileName("=?GBK?B?"+
			// enc.encode(affixName.getBytes()()) + "?=");
			// multipart.addBodyPart(messageBodyPart);
			// 将multipart对象放到message中
			message.setContent(multipart);
			// 保存邮件
			message.saveChanges();
			// 发送邮件
			Transport transport = session.getTransport("smtp");
			// 连接服务器的邮箱
			transport.connect(host, user, pwd);
			// 把邮件发送出去
			transport.sendMessage(message, message.getAllRecipients());
			transport.close();
		} catch (Exception e) {
			e.printStackTrace();
		}
	}	
}
