package com.kingtangdata.inventoryassis.act;

import android.content.Intent;
import android.os.AsyncTask;
import android.os.Bundle;
import android.text.InputType;
import android.text.TextUtils;
import android.util.DisplayMetrics;
import android.view.View;
import android.view.WindowManager;
import android.widget.CheckBox;
import android.widget.CompoundButton;
import android.widget.CompoundButton.OnCheckedChangeListener;
import android.widget.EditText;

import com.kingtangdata.inventoryassis.R;
import com.kingtangdata.inventoryassis.activity.BaseActivity;
import com.kingtangdata.inventoryassis.db.UserManager;
import com.kingtangdata.inventoryassis.tabs.TabsOfBottom;
import com.kingtangdata.inventoryassis.util.Md5Utils;
import com.kingtangdata.inventoryassis.util.StorageUtils;

public class ActivityLogin extends BaseActivity implements OnCheckedChangeListener{
	
	//服务器填写需要带端口例如：127.0.0.1:8080
	String default_url;
	//弹出介绍图片线程
	private View splashShow;
	
	private EditText etAccount ;
	private EditText etPassword ;
	
	//选中显示密码
	private CheckBox cbPassword;
	
	
	public void onCreate(Bundle bundle){
		super.onCreate(bundle);
		super.setContentView(R.layout.activity_login);
		super.setTopLabel("用户登录");
		super.setTopViewVisibility(View.GONE);
		
		splashShow = findViewById(R.id.splash_show);
		
		etAccount = (EditText)findViewById(R.id.text_user_id);
		etPassword = (EditText)findViewById(R.id.text_password);
		
		cbPassword = (CheckBox)findViewById(R.id.checkbox);
		cbPassword.setOnCheckedChangeListener(this);
		
		//获取设备屏幕宽高以及密度
		DisplayMetrics metrics = new DisplayMetrics();
		WindowManager wm = getWindowManager();
		wm.getDefaultDisplay().getMetrics(metrics);
		int dpi = metrics.densityDpi;
		//将屏幕密度保存到文件中  方便项目其他地方使用
		//将dpi保存到文件中  
		StorageUtils.setProperty(StorageUtils.DPI, dpi, this);		
	}
	
	/*
	 * 单击登陆事件调用
	 */
	public void doLogin(View view){
		String account = etAccount.getText().toString();
		String password = etPassword.getText().toString();
		
		//用户名不能为空
		if(TextUtils.isEmpty(account)){
    		makeText("请输入用户名！");
    		return;
    	}
		
		//密码不能为空
		if(TextUtils.isEmpty(password)){
    		makeText("密码不能为空！");
    		return;
    	}
		
		//开始检查用户名和密码
		if (login(account, password)){
	        Intent intent = new Intent();
	        intent.setClass(this, TabsOfBottom.class);
	        startActivity(intent);
	        finish();
    	}else{
    		makeText("用户名或密码错误");
    	}
	}
	
	private boolean login(String userCode, String password){
		//采用 MD5加密
		String md5 = Md5Utils.toMD5(password);
		//检查用户是否存在于用户表中
		return UserManager.getInstance(this).checkUser(userCode, md5);
	}
	
	
	protected void onResume(){
	    super.onResume();
	    //给默认值，调试用
	    String account = StorageUtils.getString(StorageUtils.USER_ACCOUNT,this,"admin");
	    String password = StorageUtils.getString(StorageUtils.USER_PASSWORD,this,"dba");
	    
	    etAccount.setText(account);
	    etPassword.setText(password);
	    
	    new SplashShowTask().execute(new Void[0]);
	}
	
	/*
	 * AsyncTask,是android提供的轻量级的异步类,
	 * 可以直接继承AsyncTask,在类中实现异步操作,
	 * 并提供接口反馈当前异步执行的程度(可以通过接口实现UI进度更新),
	 * 最后反馈执行的结果给UI主线程.
	 * 该task只能被执行一次，否则多次调用时将会出现异常；
	 */
	private class SplashShowTask extends AsyncTask<Void, Integer, Boolean>{
		
		private SplashShowTask(){
			
		}
		
		/*
		 * doInBackground(Params…) 后台执行，比较耗时的操作都可以放在这里。
		 * 注意这里不能直接操作UI。此方法在后台线程执行，完成任务的主要工作，
		 * 通常需要较长的时间。
		 */
	    protected Boolean doInBackground(Void[] paramArrayOfVoid){
	    	
	    	try{
	    		
		        Thread.sleep(3000L);
		        return true;
		        
	    	}catch(InterruptedException exception){
	    		
	    		while (true)
	    			exception.printStackTrace();
	    		
	    	}
	    }

	    protected void onPostExecute(Boolean paramBoolean){
	    	
	    	splashShow.setVisibility(View.GONE);
	    	setTopViewVisibility(View.VISIBLE);
	    }
	    
	}
	
	public void doExit(View paramView){
		finish();
	}


	@Override
	public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {
		// TODO Auto-generated method stub
		if (isChecked) {
			etPassword.setInputType(InputType.TYPE_TEXT_VARIATION_VISIBLE_PASSWORD);
		} else {
			etPassword.setInputType(InputType.TYPE_CLASS_TEXT| InputType.TYPE_TEXT_VARIATION_PASSWORD);
		}
	}
}