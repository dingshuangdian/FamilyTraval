package com.kingtangdata.inventoryassis.act;

import java.net.HttpURLConnection;
import java.net.URL;
import java.util.List;

import android.content.Context;
import android.os.AsyncTask;
import android.os.Bundle;
import android.view.View;
import android.widget.CheckBox;
import android.widget.ProgressBar;
import android.widget.TextView;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.kingtangdata.inventoryassis.R;
import com.kingtangdata.inventoryassis.activity.BaseActivity;
import com.kingtangdata.inventoryassis.adapter.PopForTaskAdapter;
import com.kingtangdata.inventoryassis.common.AsyncReqTask;
import com.kingtangdata.inventoryassis.data.Plan;
import com.kingtangdata.inventoryassis.data.Task;
import com.kingtangdata.inventoryassis.db.PlanManager;
import com.kingtangdata.inventoryassis.http.HttpConstants;
import com.kingtangdata.inventoryassis.http.HttpResponseCode;
import com.kingtangdata.inventoryassis.http.business.SystemProvider;
import com.kingtangdata.inventoryassis.http.domain.BaseReq;
import com.kingtangdata.inventoryassis.http.domain.BaseRes;
import com.kingtangdata.inventoryassis.http.domain.TaskRes;
import com.kingtangdata.inventoryassis.http.domain.UploadReq;
import com.kingtangdata.inventoryassis.util.LogUtils;
import com.kingtangdata.inventoryassis.util.StorageUtils;
import com.kingtangdata.inventoryassis.view.SliderPopupChoicer;


/**
 * 数据上传界面
 * @author leo *
 */
public class ActivityUploadData extends BaseActivity{
	private static final int PAGE_SIZE = 10;  
	//进度条
	ProgressBar progressBar1;
	ProgressBar progressBar2;
	
	//文本框
	TextView   progressText1;
	TextView   progressText2;
	
	//复选框
	CheckBox uploadPlanCheckBox;
	CheckBox uploadMarkCheckBox;
	
	//下拉选项框控件
	SliderPopupChoicer choicer;
	
	//异步处理类
	TestNetworkTask tnTask = null;
	UploadCkeckedTask upcTask = null;
	UploadBindTask  ubTask = null;
	GetListTask glTask = null;
	@Override
	protected void onCreate(Bundle savedInstanceState) {
		// TODO Auto-generated method stub
		super.onCreate(savedInstanceState);
		super.setContentView(R.layout.activity_upload_data);
		super.setTopLabel("上传结果");
		//显示返回按钮，这里不需要设置文字 采用图片实现
		super.setLeftButtonImage(R.drawable.btn_back_bg);
		
		uploadPlanCheckBox = (CheckBox)findViewById(R.id.check_upload_1);
		uploadMarkCheckBox = (CheckBox)findViewById(R.id.check_upload_2);
		
		progressBar1 = (ProgressBar)findViewById(R.id.progress_upload1);
		progressBar2 = (ProgressBar)findViewById(R.id.progress_upload2);
		
		progressText1 =  (TextView)findViewById(R.id.progress_text1);
		progressText2 =  (TextView)findViewById(R.id.progress_text2);
		
		choicer = (SliderPopupChoicer)findViewById(R.id.checker_choice);
		
		glTask = new GetListTask(this);
		glTask.execute(new BaseReq());
	}
	
	@Override
	protected void onResume() {
		// TODO Auto-generated method stub
		super.onResume();
		if(!isNetworkAvalible()){
			setRightButtonImage(R.drawable.icon_network_no);
		}else{
			tnTask = new TestNetworkTask();
			tnTask.execute();
		}
	}
	
	
	@Override
	public void onBackPressed() {
		// TODO Auto-generated method stub
		finish();
	}
	
	@Override
	public void doClickLeftBtn() {
		// TODO Auto-generated method stub
		onBackPressed();
	}
	
	
	@Override
	protected void onDestroy() {
		// TODO Auto-generated method stub
		super.onDestroy();
		
		//在界面销毁的时候销毁所有的进程
		if(tnTask != null && !tnTask.isCancelled()){
			tnTask.cancel(true);
		}
		
		if(upcTask != null && !upcTask.isCancelled()){
			upcTask.cancel(true);
		}
		
		if(ubTask != null && !ubTask.isCancelled()){
			ubTask.cancel(true);
		}
		
		if(glTask != null && !glTask.isCancelled()){
			glTask.cancel(true);
		}
	}
	
	
	/**
	 * 点击开始下载的方法
	 * @param view
	 */
	public void doStart(View view){
		//至少有一个选中才开始下载
		if(uploadPlanCheckBox.isChecked()){
			//先判断一下网络是否可用  不可用会给出提示
			if(isNetworkAvalible()){
				upcTask = new UploadCkeckedTask(this);
				upcTask.execute(new BaseReq());
			}
		}
		
		if(uploadMarkCheckBox.isChecked()){
			if(isNetworkAvalible()){
				ubTask = new UploadBindTask(this);
				ubTask.execute(new BaseReq());
			}
		}
	} 
	
	
	/**
	 * 测试服务器是否连通
	 * @author Administrator
	 *
	 */
	class TestNetworkTask extends AsyncTask<String, Integer, Boolean>{
		
		@Override
		protected Boolean doInBackground(String... params) {
			
			try {
				String ip_address = StorageUtils.getString(StorageUtils.IP_ADDRESS, ActivityUploadData.this, HttpConstants.DEFAULT_IP);
				String httpAddress = "http://" + ip_address + HttpConstants.TEST_ACTION ;
				
				LogUtils.logd(getClass(), "httpAddress = " + httpAddress);
				URL url = new URL(httpAddress);
				HttpURLConnection connection = (HttpURLConnection)url.openConnection();
				connection.setReadTimeout(HttpConstants.CONNECT_TIME_OUT);
				connection.setConnectTimeout(HttpConstants.READ_TIME_OUT);
				LogUtils.logd(getClass(), "code = " + connection.getResponseCode());
				
				return connection.getResponseCode() == 200 ;
			} catch (Exception e) {
				// TODO Auto-generated catch block
				return false;
			}
		}
	
		@Override
		protected void onPostExecute(Boolean result) {
			// TODO Auto-generated method stub
			if(result){
				//目前判断服务器是否能连接成功就根据是否能调获取任务列表接口
				setRightButtonImage(R.drawable.icon_network_ok);
			}else{
				setRightButtonImage(R.drawable.icon_network_no);
			}
		}
	}
 	
	
	/**
	 * 获取任务
	 * @author Administrator
	 *
	 */
	class GetListTask extends AsyncReqTask{

		public GetListTask(Context context) {
			super(context);
			// TODO Auto-generated constructor stub
		}

		@Override
		protected BaseRes doRequest(BaseReq request) {
			// TODO Auto-generated method stub
			return SystemProvider.getInstance(getApplicationContext()).getTask(request);
		}

		@Override
		protected void handleResponse(BaseRes response) {
			// TODO Auto-generated method stub
			if(response == null){
				return ;
			}
			
			if(HttpResponseCode.SUCCESS.equals(response.getCode())){
				TaskRes res = (TaskRes)response;
				List<Task> tasks = res.getDatas();
				
				PopForTaskAdapter adapter = new PopForTaskAdapter(ActivityUploadData.this, tasks);
				choicer.setAdapter(adapter);
				
				//目前判断服务器是否能连接成功就根据是否能调获取任务列表接口
				setRightButtonImage(R.drawable.icon_network_ok);
			}else{
				setRightButtonImage(R.drawable.icon_network_no);
			}
		}
	}
	
	
	/**
	 * 上传已盘点数据
	 * @author Administrator
	 *
	 */
	class UploadCkeckedTask extends AsyncReqTask{
		//总记录数
		int totalNum = 0;
		//总页数
		int totalPage = 0;
		//页码
		int pageNum = 0;
		

		public UploadCkeckedTask(Context context) {
			super(context);
			// TODO Auto-generated constructor stub
		}

		@Override
		protected BaseRes doRequest(BaseReq request) {
			// TODO Auto-generated method stub
			//查询需要上传的总记录数
			String sql = "select count(*) as sumId  from plans where is_upload=0  and check_result in(?,?,?)";
			String[] params1 = new String[]{"zc","pk","py"};

			totalNum = PlanManager.getInstance(getApplicationContext()).getPlanCount(sql.toString(), params1);
			
			//计算总页数
			if(totalNum % PAGE_SIZE == 0){
				totalPage = totalNum/PAGE_SIZE;
			}else{
				totalPage = totalNum/PAGE_SIZE + 1;
			}
			
			//如果总页数小于等于0直接返回
			if(totalPage <= 0){
				return null;
			}

			//开始循环上传
			for (int i = 0; i < totalPage; i++) {
				//查询需要上传的记录
				StringBuffer querySQL = new StringBuffer();
				querySQL.append("select * from plans where is_upload=0  and check_result in(?,?,?) ");
				String[] params2 = new String[]{"zc","pk","py"};
				List<Plan> list = PlanManager.getInstance(getApplicationContext()).getPlans(querySQL, params2,i+1);
				
				// 转换器
				GsonBuilder builder = new GsonBuilder();
				// 不转换没有 @Expose 注解的字段
				builder.excludeFieldsWithoutExposeAnnotation();
				Gson gson = builder.create();
				String jsonStr =gson.toJson(list);
				
				LogUtils.logd(getClass(), "jsonStr = " + jsonStr);
				
				Object o = choicer.getSelectItem();
				Task t = (Task)o;
				
				UploadReq req = new UploadReq();
				
				if(t != null ){
					req.setCheck_id(t.getCheck_id());
				}
				req.setJson(jsonStr);
				
				BaseRes res = SystemProvider.getInstance(getApplicationContext()).uoloadPlan(req);
				
				//插入成功 更新数据库字段 is_upload = 1
				if(HttpResponseCode.SUCCESS.equals(res.getCode())){
					for (Plan plan : list) {
						plan.setIs_upload("1");
						PlanManager.getInstance(getApplicationContext()).updatePlan(plan, plan.getDet_id());
					}
				}
				
				if(i == totalPage -1){
					publishProgress(100);
				}else{
					publishProgress(getPercent(i, totalPage));
				}
			}
			return null;
		}

		@Override
		protected void handleResponse(BaseRes response) {
			// TODO Auto-generated method stub
		}
		
		@Override
		protected void onProgressUpdate(Integer... values) {
			// TODO Auto-generated method stub
			progressBar1.setProgress(values[0]);
			progressText1.setText("已完成"+values[0] + "%");
		}
	} 
	
	
	
	/**
	 * 上传已盘点数据
	 * @author Administrator
	 *
	 */
	class UploadBindTask extends AsyncReqTask{
		//总记录数
		int totalNum = 0;
		//总页数
		int totalPage = 0;
		//页码
		int pageNum = 0;

		public UploadBindTask(Context context) {
			super(context);
			// TODO Auto-generated constructor stub
		}

		@Override
		protected BaseRes doRequest(BaseReq request) {
			// TODO Auto-generated method stub
			String sql = "select count(*) as  sumId from plans where is_bind=0 ";
			//查出需要上传的总记录数
			totalNum = PlanManager.getInstance(getApplicationContext()).getPlanCount(sql, null);
			
			//计算总页数
			if(totalNum % PAGE_SIZE == 0){
				totalPage = totalNum/PAGE_SIZE;
			}else{
				totalPage = totalNum/PAGE_SIZE + 1;
			}
			
			//如果总页数小于等于0直接返回
			if(totalPage <= 0){
				return null;
			}
			
		
			//开始循环上传
			for (int i = 0; i < totalPage; i++) {
				//查询需要上传的记录
				StringBuffer querySQL = new StringBuffer();
				querySQL.append("select * from plans where is_bind=0");
				List<Plan> list = PlanManager.getInstance(getApplicationContext()).getPlans(querySQL,null,i+1);
				
				// 转换器
				GsonBuilder builder = new GsonBuilder();
				// 不转换没有 @Expose 注解的字段
				builder.excludeFieldsWithoutExposeAnnotation();
				Gson gson = builder.create();
				String jsonStr =gson.toJson(list);
				
				Object o = choicer.getSelectItem();
				Task t = (Task)o;
				
				UploadReq req = new UploadReq();
				
				if(t != null ){
					req.setCheck_id(t.getCheck_id());
				}
				
				req.setJson(jsonStr);
				
				BaseRes res = SystemProvider.getInstance(getApplicationContext()).uoloadPlan(req);
				
				//插入成功 更新数据库字段 is_upload = 1
				if(HttpResponseCode.SUCCESS.equals(res.getCode())){
					for (Plan plan : list) {
						plan.setIs_bind("1");
						PlanManager.getInstance(getApplicationContext()).updatePlan(plan, plan.getDet_id());
					}
				}
				
				if(i == totalPage -1){
					publishProgress(100);
				}else{
					publishProgress(getPercent(i, totalPage));
				}
			}
			return null;
		}

		@Override
		protected void handleResponse(BaseRes response) {
			// TODO Auto-generated method stub
		}
		
		@Override
		protected void onProgressUpdate(Integer... values) {
			// TODO Auto-generated method stub
			progressBar2.setProgress(values[0]);
			progressText2.setText("已完成"+values[0] + "%");
		}
	} 
	
	/**
	 * 获取百分比
	 * @param x
	 * @param total
	 * @return
	 */
	public int getPercent(int x,int total){  
		
		if(x == 0 || total == 0 ){
			return 0;
		}
		
		int tempresult=x*100/total;  
		return tempresult;  
	}  
}